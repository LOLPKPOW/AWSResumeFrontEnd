AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  # Lambda function for your visitor counter logic
  VisitorCounterFunction: 
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler # Adjust if your filename/handler is different
      Runtime: python3.8 
      CodeUri: ./lambda_function.py
      Environment:
        Variables:
          TABLE_NAME: !Ref VisitorCounterTable # Passes the table name as an environment variable
      Policies: 
        - DynamoDBReadPolicy:
            TableName: !Ref VisitorCounterTable
        - DynamoDBWritePolicy:
            TableName: !Ref VisitorCounterTable
      Role: arn:aws:iam::853234049808:role/service-role/ExpenseTracker-role-q4ydxqcj

  # DynamoDB table to store the visitor count
  VisitorCounterTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: VisitorCounterTable
      BillingMode: PAY_PER_REQUEST 
      AttributeDefinitions: 
        - AttributeName: CounterID
          AttributeType: N # Number type for the counter
        - AttributeName: DateRecorded
          AttributeType: S # String type for recording dates
      KeySchema: 
        - AttributeName: CounterID
          KeyType: HASH # Hash key for fast lookups
        - AttributeName: DateRecorded
          KeyType: RANGE # Range key to query within date ranges

  # API Creation
  VisitorCounterApi:
      Type: AWS::Serverless::HttpApi # Switch to AWS::Serverless::HttpApi
      Properties:
          StageName: prod
          DefinitionBody: 
              openapi: 3.0.1 # Use appropriate OpenAPI version for HTTP APIs
              info:
                  title: "Visitor Counter API"
              paths:
                  /visitor-count:  
                      get:
                          x-amazon-apigateway-integration:
                              uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VisitorCounterFunction.Arn}/invocations
                              passthroughBehavior: when_no_match
                              httpMethod: GET
                              type: aws_proxy
                      post: 
                          x-amazon-apigateway-integration:
                              uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VisitorCounterFunction.Arn}/invocations
                              passthroughBehavior: when_no_match
                              httpMethod: POST
                              type: aws_proxy 

  VisitorCounterApiIntegration:
    Type: AWS::ApiGatewayV2::Integration 
    Properties:
      ApiId: !Ref VisitorCounterApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VisitorCounterFunction.Arn}/invocations
      PayloadFormatVersion: '2.0' # Adjust if needed for your Lambda's expected behavior

Outputs:
  VisitorCounterApiUrl:
    Value: !Sub "https://${VisitorCounterApi}.execute-api.${AWS::Region}.amazonaws.com/prod/visitor-count"
  VisitorCounterFunctionArn:
    Value: !Sub "${VisitorCounterFunction.Arn}"
